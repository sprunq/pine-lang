use base::located::Located;
use base::source_id::SourceId;
use crate::token::Token;
use crate::ast::stmt::*;
use crate::ast::expr::*;
use crate::ast::op::*;
use crate::ast::ty::*;
use crate::ast::*;
use messages::lexer::LexerError;

grammar<'input>(file_id : SourceId);

extern {
    type Location = usize;
    type Error = LexerError;

    enum Token {
        "(" => Token::LtParen,
        ")" => Token::RtParen,
        "{" => Token::LtBrace,
        "}" => Token::RtBrace,
        "," => Token::Comma,
        "." => Token::Dot,
        "-" => Token::Minus,
        "+" => Token::Plus,
        ";" => Token::Semicolon,
        "/" => Token::Slash,
        "%" => Token::Modulo,
        "*" => Token::Asterisk,
        ":" => Token::Colon,
        "->" => Token::ArrowRight,

        "!" => Token::Bang,
        "!=" => Token::BangEqual,
        "=" => Token::Equal,
        "==" => Token::EqualEqual,
        ">" => Token::Greater,
        ">=" => Token::GreaterEqual,
        "<" => Token::Less,
        "<=" => Token::LessEqual,

        identifier => Token::Identifier(<String>),
        string => Token::String(<String>),
        integer => Token::Integer(<i64>),
        float => Token::Float(<f64>),

        "and" => Token::And,
        "type" => Token::Type,
        "else" => Token::Else,
        "false" => Token::False,
        "fun" => Token::Fun,
        "if" => Token::If,
        "or" => Token::Or,
        "return" => Token::Return,
        "break" => Token::Break,
        "true" => Token::True,
        "let" => Token::Let,
        "loop" => Token::Loop,

        "bool" => Token::TyBool,
        "i8" => Token::TyI8,
        "i32" => Token::TyI32,
        "i64" => Token::TyI64,
        "u8" => Token::TyU8,
        "u32" => Token::TyU32,
        "u64" => Token::TyU64,
        "f32" => Token::TyF32,
        "f64" => Token::TyF64,
        "str" => Token::TyStr,
    }
}


// --------------------------------------------------------------------------------------------------
//                                          Helpers
// --------------------------------------------------------------------------------------------------

// Parses an object of type T, and returns a Located<T>
Located<T>: Located<T> = {
    <start: @L> <data: T> <end: @R> => Located::new(file_id, start..end, data),
};

// Parses a comma separated list of T, and returns a Vec<T>
Comma<T>: Vec<T> = { 
    <mut v:(<T> ",")*> <e:T?> => match e { 
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};


// --------------------------------------------------------------------------------------------------
//                                          Declarations
// --------------------------------------------------------------------------------------------------

pub Program: Program = <stmts:Located<Declaration>*> => Program { <> };

Declaration : Declaration = { 
    DeclarationTypeObject, 
    DeclarationFunction
}

DeclarationTypeObject: Declaration = TypeObject => Declaration::TypeObject(<>);
TypeObject: TypeObject = "type" <name:Identifier> "=" "{" <members:Comma<TypedParam>> "}" => TypeObject { <> };

DeclarationFunction: Declaration = FunctionDeclaration => Declaration::Fun(<>);
FunctionDeclaration: FunctionDeclaration = "fun" <name:Identifier> "(" <params:Comma<TypedParam>> ")" "->" <ret_ty:Located<Type>>  <body:Block> => FunctionDeclaration { <> };


// --------------------------------------------------------------------------------------------------
//                                          Statements
// --------------------------------------------------------------------------------------------------

Stmt: Stmt = {
    StmtVarDecl,
    StmtAssign,
    StmtIf,
    StmtLoop,
    StmtBlock,
    StmtExpr,
    StmtReturn,
    StmtBreak,
    StmtEmpty,
}

StmtAssign : Stmt = Assign => Stmt::Assign(Box::new( <> ));
Assign : Assign = <var:Located<Expr1>> "=" <value:Located<Expr>> ";" => Assign { <> };

StmtVarDecl: Stmt = VariableDeclaration => Stmt::VariableDeclaration( <> );
VariableDeclaration: VariableDeclaration = "let" <var:Identifier> ":" <ty:Located<Type>> "=" <value:Located<Expr>> ";" => VariableDeclaration { <> };

StmtLoop: Stmt = Loop => Stmt::Loop(Box::new(<>));
Loop: Loop = "loop" <body:Located<StmtBlock>> => Loop { <> };

StmtBlock: Stmt = Block => Stmt::Block(<>);
Block:  Block = "{" <stmts:Located<Stmt>*> "}" => Block { <> };

StmtIf: Stmt = IfElse => Stmt::If(Box::new(<>));
IfElse: IfElse = "if" "(" <cond:Located<Expr>> ")" <then:Located<StmtBlock>> <optional_else : ("else" <Located<StmtBlock>>)?> => { 
    match optional_else {
        Some(els) => IfElse { cond, then, else_: Some(els) },
        None => IfElse { cond, then, else_: None },
    }
};

StmtEmpty:  Stmt = <l:@L> ";" <r:@R>  => Stmt::Empty(Empty { span : Located::empty(file_id, l..r)});
StmtExpr:   Stmt = <value:Located<Expr>> ";" => Stmt::Expr(StmtExpr { <> });
StmtReturn: Stmt = "return" <value:Located<Expr>?> ";" => Stmt::Return(Return { <> });
StmtBreak:  Stmt =  <l:@L> "break" ";" <r:@R> => Stmt::Break(Break { span : Located::empty(file_id, l..r) });
    

// --------------------------------------------------------------------------------------------------
//                                          Expressions
// --------------------------------------------------------------------------------------------------

Expr : Expr = Expr8;

Expr8 = TierInfix<Expr8, OpLogicOr,     Expr7>;
Expr7 = TierInfix<Expr7, OpLogicAnd,    Expr6>;
Expr6 = TierInfix<Expr6, OpEquality,    Expr5>;
Expr5 = TierInfix<Expr5, OpComparison,  Expr4>;
Expr4 = TierInfix<Expr4, OpTerm,        Expr3>;
Expr3 = TierInfix<Expr3, OpFactor,      Expr2>;
Expr2 = TierPrefix<OpPrefix,            Expr1>;

Expr1: Expr = {
    ExprFunctionCall,
    ExprMemberAccess,
    Expr0,
}

Expr0: Expr = {
    ExprStructureInit,
    ExprLiteral,
    ExprVariable,
    "(" <Expr> ")",
}

ExprMemberAccess: Expr = MemberAccess => Expr::MemberAccess(Box::new( <> ));
MemberAccess : ExprMemberAccess = <object:Located<Expr1>> "." <member_name:Identifier> => ExprMemberAccess { <> };

ExprFunctionCall: Expr = FunctionCall => Expr::Call(Box::new( <> ));
FunctionCall : ExprCall = <callee:Located<Expr1>> "(" <args:Comma<Located<Expr>>> ")" => ExprCall { <> };

ExprStructureInit: Expr = StructInit => Expr::StructureInit( <> );
StructInit : ExprStructureInit = <name:Identifier> "{" <members: Comma<StructMemberInitPair>> "}" => ExprStructureInit { <> };

ExprVariable: Expr = Variable => Expr::Var( <> );
Variable : ExprVar = <var:Identifier> => ExprVar { <> };

Identifier : Identifier = <name:identifier> => Identifier { <> };
StructMemberInitPair: (Identifier, Located<Expr>) = { <name:Identifier> ":" <value:Located<Expr>> => (<>) }

ExprLiteral : Expr = Literal => Expr::Literal(<>);
Literal : ExprLiteral = {
    "false" => ExprLiteral::Bool(false),
    "true" => ExprLiteral::Bool(true),
    string => ExprLiteral::String(<>),
    integer => ExprLiteral::Integer(<>),
    float => ExprLiteral::Float(<>),
}


// --------------------------------------------------------------------------------------------------
//                                             Types
// --------------------------------------------------------------------------------------------------

TypedParam : TypedParam  = <name:Located<Identifier>> ":" <ty:Located<Type>> => TypedParam { <> };

Type : Type = {
    "(" ")" =>  Type::Unit,
    "bool" =>   Type::Bool,
    "i8" =>     Type::I8,
    "i32" =>    Type::I32,
    "i64" =>    Type::I64,
    "u8" =>     Type::U8,
    "u32" =>    Type::U32,
    "u64" =>    Type::U64,
    "f32" =>    Type::F32,
    "f64" =>    Type::F64,
    "str" =>    Type::String,
    <identifier> => Type::Struct(<>),
}


// --------------------------------------------------------------------------------------------------
//                                             Operators
// --------------------------------------------------------------------------------------------------
OpLogicOr: OpInfix = "or" => OpInfix::LogicOr;
OpLogicAnd: OpInfix = "and" => OpInfix::LogicAnd;
OpEquality: OpInfix = { "==" => OpInfix::Equal, "!=" => OpInfix::NotEqual }
OpComparison: OpInfix = { ">" => OpInfix::Greater, ">=" => OpInfix::GreaterEqual, "<" => OpInfix::Less, "<=" => OpInfix::LessEqual }
OpTerm: OpInfix = { "+" => OpInfix::Add, "-" => OpInfix::Subtract }
OpFactor: OpInfix = { "*" => OpInfix::Multiply, "/" => OpInfix::Divide, "%" => OpInfix::Modulo}
OpPrefix: OpPrefix = { "-" => OpPrefix::Negate, "!" => OpPrefix::Not }

TierInfix<Lt, Op, Rt>: Expr = {
    <lt:Located<Lt>> <op:Op> <rt:Located<Rt>> => Expr::Infix(Box::new(ExprInfix { <> })),
    Rt,
}

TierPrefix<Op, Rt>: Expr = {
    <op:Op> <rt:Located<Rt>> => Expr::Prefix(Box::new(ExprPrefix { <> })),
    Rt,
}